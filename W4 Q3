Here's the C++ code for a Theatre Ticket Booking System using the MovieTicket class. It includes booking, cancellation, display of ticket details, and a destructor to show a message when a ticket is deleted â€” all without command-line inputs:

#include <iostream>
#include <string>
using namespace std;

class MovieTicket {
private:
    string movieName;
    int seatNumber;
    double price;
    bool isBooked;

public:
    // Constructor
    MovieTicket(string name, int seat, double cost) {
        movieName = name;
        seatNumber = seat;
        price = cost;
        isBooked = false;
    }

    // Function to book the ticket
    void bookTicket() {
        if (!isBooked) {
            isBooked = true;
            cout << "Seat " << seatNumber << " for '" << movieName << "' has been booked." << endl;
        } else {
            cout << "Seat " << seatNumber << " is already booked." << endl;
        }
    }

    // Function to cancel the ticket
    void cancelTicket() {
        if (isBooked) {
            isBooked = false;
            cout << "Seat " << seatNumber << " booking has been cancelled." << endl;
        } else {
            cout << "Seat " << seatNumber << " is not booked yet." << endl;
        }
    }

    // Function to display ticket details
    void displayTicketDetails() {
        cout << "Movie: " << movieName << endl;
        cout << "Seat Number: " << seatNumber << endl;
        cout << "Price: $" << price << endl;
        cout << "Status: " << (isBooked ? "Booked" : "Available") << endl;
        cout << "-----------------------------" << endl;
    }

    // Destructor
    ~MovieTicket() {
        cout << "Ticket for seat " << seatNumber << " is removed from system." << endl;
    }
};

// Demonstration
int main() {
    // Creating movie ticket objects
    MovieTicket ticket1("Avengers", 1, 12.5);
    MovieTicket ticket2("Avengers", 2, 12.5);
    MovieTicket ticket3("Avengers", 3, 12.5);

    // Display initial details
    ticket1.displayTicketDetails();
    ticket2.displayTicketDetails();
    ticket3.displayTicketDetails();

    // Booking tickets
    ticket1.bookTicket();
    ticket2.bookTicket();

    // Trying to book an already booked ticket
    ticket1.bookTicket();

    // Cancel a booking
    ticket2.cancelTicket();

    // Display final status
    ticket1.displayTicketDetails();
    ticket2.displayTicketDetails();
    ticket3.displayTicketDetails();

    return 0;
}

Key Features:

Constructor initializes the ticket details.

bookTicket() only allows booking if the ticket is not already booked.

cancelTicket() sets the ticket back to available if it's currently booked.

The destructor shows a message when the object goes out of scope at program end.

All actions are demonstrated statically in main() without any user input.


